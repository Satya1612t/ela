generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COADMIN
  USER
}

enum TokenType {
  REFRESH
  FCM
  OTHER
}

enum ApplicationStatus {
  OPENED
  AWAITING_ACTION
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CLOSED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentType {
  INITIAL
  OBJECTION
  ADDITIONAL
  CORRECTION
}

enum AudienceType {
  ALL
  SPECIFIC
  ROLE_BASED
}

model User {
  id              String              @id @default(uuid()) @db.Uuid
  uid             String?             @unique
  fullName        String
  email           String              @unique
  phone           String              @unique
  dob             DateTime?
  gender          String?
  role            Role                @default(USER)
  termsAccepted   Boolean             @default(false)
  termsAcceptedAt DateTime?
  emailVerified   Boolean             @default(false)
  lastLogin       DateTime?
  loginAttempts   Int                 @default(0)
  tokens          Token[]
  applications    Application[]
  updates         ApplicationUpdate[] @relation("UserUpdates")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  token     String    @unique
  type      TokenType
  role      Role
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Service {
  id           String               @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  isActive     Boolean              @default(true)
  note         String?
  createdAt    DateTime             @default(now())
  applications ApplicationService[]
  payments     Payment[]            @relation("ServicePayments")
}

model Application {
  id                String               @id @default(uuid()) @db.Uuid
  ticketNo          String               @unique
  userId            String               @db.Uuid
  user              User                 @relation(fields: [userId], references: [id])
  services          ApplicationService[]
  serviceType       String
  applicationStatus ApplicationStatus    @default(OPENED)
  objectionReason   String?
  createdAt         DateTime             @default(now())
  autoCloseAt       DateTime?
  payments          Payment[]
  updates           ApplicationUpdate[]
}

model ApplicationService {
  id            String      @id @default(uuid()) @db.Uuid
  applicationId String      @db.Uuid
  serviceId     String      @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])

  @@unique([applicationId, serviceId])
}

model PaymentMethod {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Payment {
  id                     String        @id @default(uuid()) @db.Uuid
  applicationId          String        @db.Uuid
  serviceId              String        @db.Uuid
  paymentMethod          String
  amount                 Decimal
  paymentGatewayResponse Json?
  purpose                String
  paymentType            PaymentType
  status                 PaymentStatus @default(PENDING)
  transactionId          String        @unique
  parentTransactionId    String?       @db.Uuid
  paymentDate            DateTime      @default(now())
  expiresAt              DateTime?
  application            Application   @relation(fields: [applicationId], references: [id])
  service                Service       @relation("ServicePayments", fields: [serviceId], references: [id])
  parentTransaction      Payment?      @relation("RefundRelation", fields: [parentTransactionId], references: [id])
  refunds                Payment[]     @relation("RefundRelation")
}

model ApplicationUpdate {
  id            String      @id @default(uuid()) @db.Uuid
  applicationId String      @db.Uuid
  updaterBy     String      @db.Uuid
  message       String?
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
  updater       User        @relation("UserUpdates", fields: [updaterBy], references: [id])
}

model Notification {
  id               String             @id @default(uuid()) @db.Uuid
  title            String
  body             String
  role             Role
  audienceType     AudienceType
  notificationType String             @default("general")
  clickAction      String             @default("")
  createdAt        DateTime           @default(now())
  reads            NotificationRead[]
}

model NotificationRead {
  id             String       @id @default(uuid()) @db.Uuid
  notificationId String       @db.Uuid
  userId         String       @db.Uuid
  isRead         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id])
}
